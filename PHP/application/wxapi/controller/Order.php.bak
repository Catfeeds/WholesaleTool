<?php
// +----------------------------------------------------------------------
// | desc: Sms.php 发送获取验证码的接口
// +----------------------------------------------------------------------
// | author: xiaodu
// +----------------------------------------------------------------------
// | time: 2018/8/13 10:00
// +----------------------------------------------------------------------

namespace app\wxapi\controller;
use think\Config;
use think\Db;

class Order extends Common
{
    /*
     * 新建订单接口
     * @param data
     * @return 无
     * */
    public function create_order(){
        $this->checkToken();
        $unionid = request()->param('unionId');
        //查询当前创建人是否是买家
        $user = Db::name('user')->where(['union_id'=>$unionid,"status"=>1])->find();
        if($user['user_type']!=1){
            $this -> returnError([],400,"当前用户不是终端用户！");
        }
        //查询当前买家的卖家
        $client_supplier = Db::name('client_supplier')->where(['client_id'=>$user['id'],"status"=>1])->find();
        if(!$client_supplier){
            $this -> returnError([],400,"当前用户没有绑定供应商！");
        }
        $supplier_id = $client_supplier['supplier_id'];
        $client_id = $user['id'];
        $comments = request()->param('comments');
        $order_type = request()->param('order_type');
        if($order_type==0){
            //正常订单
            $product_list = request()->param('product_list');
            $user_product_list = request()->param('user_product_list');
            $other_product_list = request()->param('other_product_list');
            if($product_list){
                $product_list = json_decode($product_list,true);
            }else{
                $product_list = array();
            }
            if($user_product_list){
                $user_product_list = json_decode($user_product_list,true);
            }else{
                $user_product_list = array();
            }
            if($other_product_list){
                $other_product_list = json_decode($other_product_list,true);
            }else{
                $other_product_list = array();
            }
            if(!count($product_list)&&!count($user_product_list)&&!count($other_product_list)){
                $this -> returnError([],400,"订单产品数据不能为空！");
            }

            $detail = [];
            //查询联合利华产品价格
            foreach($product_list as $key => $value){
                $temp = [];
                //查询产品信息
                $product = Db::name('product')->where(['id'=>$value['product_id']])->find();
                $temp['product_id'] = $value['product_id'];
                $temp['product_name'] = $product['product_name'];
                $temp['sku_code'] = $product['sku_code'];
                $temp['sku_unit'] = $product['sku_unit'];
                $temp['product_count'] = $value['product_count'];
                $temp['product_price'] = $product['product_price'];
                $temp['is_unlieve'] = 1;
                $product_price = Db::name('product_price')->where(['product_id'=>$value['product_id'],"supplier_id"=>$supplier_id,"client_id"=>$client_id])->find();
                if($product_price){
                    $temp['product_price'] = $product_price['product_price'];
                }
                $detail[] = $temp;
            }
            //查询其他品牌产品价格
            foreach($user_product_list as $key => $value){
                $temp = [];
                //查询产品信息
                $product = Db::connect('db_con')->name('product')->where(['id'=>$value['product_id']])->find();
                $temp['product_id'] = $value['product_id'];
                $temp['product_name'] = $product['product_name'];
                $temp['sku_code'] = $product['sku_code'];
                $temp['sku_unit'] = $product['sku_unit'];
                $temp['product_count'] = $value['product_count'];
                $temp['product_price'] = $product['product_price'];
                $temp['is_unlieve'] = 0;
                $product_price = Db::connect('db_con')->name('product_price')->where(['product_id'=>$value['product_id'],"supplier_id"=>$supplier_id,"client_id"=>$client_id])->find();
                if($product_price){
                    $temp['product_price'] = $product_price['product_price'];
                }
                $detail[] = $temp;
            }
            if(count($other_product_list)>0){
                Db::connect('db_con')->startTrans();
                //手动输入订单产品
                foreach($other_product_list as $key => $value){
                    //添加手动输入产品到产品表
                    $temp = [];
                    $temp['product_name'] = $value['product_name'];
                    $temp['sku_code'] = $value['sku_code'];
                    $temp['sku_unit'] = $value['sku_unit'];
                    $temp['created_by'] = $client_id;
                    $temp['created_at'] = time();
                    $temp['updated_at'] = time();

                    $result = Db::connect('db_con')->name("product") -> insert($temp);
                    if(!$result){
                        Db::connect('db_con')->rollback();
                        $this -> returnError([],400,"新增产品失败，联系管理员！");
                    }
                    $product_id = Db::connect('db_con')->name("product")->getLastInsID();
                    $temp = [];
                    $temp['product_name'] = $value['product_name'];
                    $temp['sku_code'] = $value['sku_code'];
                    $temp['sku_unit'] = $value['sku_unit'];
                    $temp['product_count'] = $value['product_count'];
                    $temp['product_id'] = $product_id;
                    $temp['is_unlieve'] = 0;
                    $temp['product_price'] = 0;
                    $detail[] = $temp;
                    $product_price = ['product_id'=>$product_id,"supplier_id"=>$supplier_id,"client_id"=>$client_id,"product_price"=>0,"created_at"=>time(),"updated_at"=>time()];
                    $result = Db::connect('db_con')->name('product_price')->insert($product_price);
                    if(!$result){
                        Db::connect('db_con')->rollback();
                        $this -> returnError([],400,"新增产品失败，联系管理员！");
                    }
                }
                Db::connect('db_con')-> commit();
            }

            $order['order_number'] = $this->get_order_sn();
            $order['client_id'] = $client_id;
            $order['supplier_id'] = $supplier_id;
            $order['order_type'] = $order_type;
            $order['comments'] = $comments;
            $order['order_status'] = 1;
            $order['created_at'] = time();
            $order['updated_at'] = time();
            Db::startTrans();
            $result =  Db::name('order') -> insert($order);
            if(!$result){
                Db::rollback();
                $this -> returnError([],400,"新增订单失败，联系管理员！");
            }
            $order_id = Db::name('order')->getLastInsID();
            foreach($detail as $key => $value){
                $value['order_id'] = $order_id;
                $result =  Db::name('order_detail') -> insert($value);
                if(!$result){
                    Db::rollback();
                    $this -> returnError([],400,"新增订单失败，联系管理员！");
                }
            }
            Db::commit();
            $this -> returnSuccess([],200,"下单成功！");
        }else{
            //图片订单
            $img_product_list = request()->param('img_product_list');
            $img_product_list = json_decode($img_product_list,true);
            if(!count($img_product_list)){
                $this -> returnError([],400,"订单产品数据不能为空！");
            }
            $order['order_number'] = $this->get_order_sn();
            $order['client_id'] = $client_id;
            $order['supplier_id'] = $supplier_id;
            $order['order_type'] = $order_type;
            $order['comments'] = $comments;
            $order['order_status'] = 1;
            $order['created_at'] = time();
            Db::startTrans();
            $result =  Db::name('order') -> insert($order);
            if(!$result){
                Db::rollback();
                $this -> returnError([],400,"新增订单失败，联系管理员！");
            }
            $order_id = Db::name('order')->getLastInsID();
            $detail['order_id'] = $order_id;
            $detail['uploaded_img'] = json_encode($img_product_list);
            $result =  Db::name('order_detail') -> insert($detail);
            if(!$result){
                Db::rollback();
                $this -> returnError([],400,"新增订单失败，联系管理员！");
            }
            Db::commit();
            $this -> returnSuccess([],200,"下单成功！");
        }

    }
    //上传图片接口
    public function upload_img(){
        $this->checkToken();
        // 获取表单上传文件
        $file = request()->file('image');
        // 移动到框架应用根目录/public/uploads/ 目录下
        if($file){
            $info = $file->validate(['ext'=>'jpg,png,gif'])->move(ROOT_PATH . 'public' . DS . 'uploads');
            if($info){
                $file_name = $info->getFilename();
                $file_path = $info->getSaveName();
                $file = ROOT_PATH . 'public' . DS . 'uploads'. DS .$file_path;
                $result = uploadFile($file_name,$file);
                //删除服务器文件
//                unlink($file);
                if(!$result){
                    $this -> returnError([],400,"上传图片失败！");
                }
                $config = config('aliyun_oss');
                $url = $config['Url']. DS .$file_name;
                $this -> returnSuccess($url,200,"上传成功");
            }else{
                // 上传失败获取错误信息
                $this -> returnError([],400, $file->getError());
            }
        }else{
            $this -> returnError([],400,"请选择上传的图片！");
        }
    }
    //买家获取订单列表
    public function get_list_client(){
        $this->checkToken();
        $unionid = request()->param('unionId');
        $order_status = request()->param('order_status');
        $date_type = request()->param('date_type');
        //查询当前创建人是否是买家
        $user = Db::name('user')->where(['union_id'=>$unionid,"status"=>1])->find();
        if($user['user_type']==0){
            $this -> returnError([],400,"未知类型的用户！");
        }

        if($user['user_type']==1){
            $client_id = $user['id'];
            //终端用户
            $where['client_id'] = $client_id;
            if($order_status>0&&$order_status<4){
                $where['order_status'] = $order_status;
            }
        }else{
            $this -> returnError([],400,"您不是终端用户！");
        }
        if($date_type>0){
            //最近三日
            $where_time = strtotime('-3 day');
            $where['created_at'] = array("gt",$where_time);
        }
        //查询当前买家的卖家
        $list = Db::name('order')->where($where) -> order("created_at desc") ->select();
        foreach($list as $key => $value){
            $order_amount = 0;
            if($value['order_type']==0){
                //正常订单
                $detail = Db::name('order_detail')->where(["order_id"=>$value['id']])->select();
                $list[$key]['product_list'] = $detail;
                foreach($detail as $k => $v){
                    $order_amount += $v['product_price']*$v['product_count'];
                }
            }else{
                //图片订单
                $detail = Db::name('order_detail')->where(["order_id"=>$value['id']])->find();
                $list[$key]['product_list'] = json_decode($detail['uploaded_img'],true);
            }
            //获取买家的餐厅
            $order_user = Db::name("user") -> where(array("id"=>$value['client_id'])) -> find();
            $list[$key]['restaurant_name'] = $order_user['restaurant_name'];
            $list[$key]['province'] = $order_user['province'];
            $list[$key]['city'] = $order_user['city'];
            $list[$key]['district'] = $order_user['district'];
            $list[$key]['address'] = $order_user['address'];
            if($order_user['type']==5){
                $list[$key]['nickname'] = $order_user['restaurant_name'];
            }else{
                $list[$key]['nickname'] = $order_user['nickname'];
            }
            $list[$key]['mobile'] = $order_user['mobile'];
            $list[$key]['order_amount'] = $order_amount;

        }
        $this -> returnSuccess($list,200,"获取订单列表成功");
    }
    //卖家获取订单列表
    public function get_list_supplier(){
        $this->checkToken();
        $unionid = request()->param('unionId');
        $order_status = request()->param('order_status');
        $date_type = request()->param('date_type');
        $client_id = '';
        if(isset($post['client_id'])) {
            $client_id = request()->param('client_id');
        }
        //查询当前创建人是否是买家
        $user = Db::name('user')->where(['union_id'=>$unionid,"status"=>1])->find();
        if($user['user_type']==0){
            $this -> returnError([],400,"未知类型的用户！");
        }

        if($user['user_type']==1){
            $this -> returnError([],400,"您不是供应商！");
        }else{
            $supplier_id = $user['supplier_id'];
            //供应商用户
            $where['supplier_id'] = $supplier_id;
            if($order_status>0&&$order_status<4){
                $where['order_status'] = $order_status;
            }
        }
        if($date_type>0){
            //最近三日
            $where_time = strtotime('-3 day');
            $where['created_at'] = array("gt",$where_time);
        }
        if($client_id>0){
            //买家id
            $where['client_id'] = $client_id;
        }
        //查询当前买家的卖家
        $list = Db::name('order')->where($where) -> order("created_at desc") ->select();
        foreach($list as $key => $value){
            $order_amount = 0;
            if($value['order_type']==0){
                //正常订单
                $detail = Db::name('order_detail')->where(["order_id"=>$value['id']])->select();
                $list[$key]['product_list'] = $detail;
                foreach($detail as $k => $v){
                    $order_amount += $v['product_price']*$v['product_count'];
                }
            }else{
                //图片订单
                $detail = Db::name('order_detail')->where(["order_id"=>$value['id']])->find();
                $list[$key]['product_list'] = json_decode($detail['uploaded_img'],true);
            }
            //获取买家的餐厅
            $order_user = Db::name("user") -> where(array("id"=>$value['client_id'])) -> find();
            $list[$key]['restaurant_name'] = $order_user['restaurant_name'];
            $list[$key]['province'] = $order_user['province'];
            $list[$key]['city'] = $order_user['city'];
            $list[$key]['district'] = $order_user['district'];
            $list[$key]['address'] = $order_user['address'];
            if($order_user['type']==5){
                $list[$key]['nickname'] = $order_user['restaurant_name'];
            }else{
                $list[$key]['nickname'] = $order_user['nickname'];
            }
            $list[$key]['mobile'] = $order_user['mobile'];
            $list[$key]['order_amount'] = $order_amount;
            $list[$key]['date'] = date("Y年m月d日",$value['created_at']);
        }
        $data = [];
        foreach($list as $key => $value){
            $is_has = 0;
            $has_key = 0;
            //按照日期划分
            foreach($data as $k => $v){
                if($value['date']==$v['date']){
                    $is_has = 1;
                    $has_key = $k;
                    break;
                }
            }
            if($is_has){
                $data[$has_key]['list'][] = $value;
            }else{
                $temp = [];
                $temp['date'] = $value['date'];
                $temp['list'][] = $value;
                $data[] = $temp;
            }
        }

        $this -> returnSuccess($data,200,"获取订单列表成功");
    }
    //编辑订单
    public function edit_order(){
        $this->checkToken();
        $unionid = request()->param('unionId');
        $order_id = request()->param('order_id');
        //查询当前创建人是否是买家
        $user = Db::name('user')->where(['union_id'=>$unionid,"status"=>1])->find();
        if($user['user_type']!=2){
            $this -> returnError([],400,"您还不是供应商用户！");
        }
        if(!$order_id){
            $this -> returnError([],400,"参数不正确！");
        }
        //查询订单信息
        $order = DB::name("order") -> where(['id'=>$order_id]) -> find();
        if(!$order){
            $this -> returnError([],400,"未发现此订单！");
        }
        Db::startTrans();
        Db::connect('db_con') -> startTrans();
        if($order['order_status']==1){
            $product_list = request()->param('product_list');
            $product_list = json_decode($product_list,true);
            if(!count($product_list)){
                DB::rollback();
                Db::connect('db_con') -> rollback();
                $this -> returnError([],400,"要修改的产品数据不能为空！");
            }
            //查询订单信息
            $order_detail = DB::name("order_detail") -> where(['order_id'=>$order_id,"product_id"=>$product_list['product_id']]) -> find();
            if(!$order_detail){
                DB::rollback();
                Db::connect('db_con') -> rollback();
                $this -> returnError([],400,"要修改的产品数据在此订单中不存在！");
            }
            //修改订单数据
            $temp = [];
            $temp['product_count'] = $product_list['product_count'];
            $temp['product_price'] = $product_list['product_price'];
            $result = DB::name("order_detail") -> where(['id'=>$order_detail['id']]) -> update($temp);
            if($result===false){
                DB::rollback();
                Db::connect('db_con') -> rollback();
                $this -> returnError([],400,"编辑订单失败！");
            }
            if($product_list['is_unlieve']==1){
                //联合利华产品
                //修改产品订单信息
                $price = DB::name("product_price") -> where(['product_id'=>$product_list['product_id'],"client_id"=>$order['client_id']]) -> find();
                if($price){
                    $temp = [];
                    $temp['product_price'] = $product_list['product_price'];
                    $temp['updated_at'] = time();
                    $result = DB::name("product_price") -> where(['id'=>$price['id']]) -> update($temp);
                    if($result===false){
                        DB::rollback();
                        Db::connect('db_con') -> rollback();
                        $this -> returnError([],400,"编辑订单失败！");
                    }
                }else{
                    $temp = [];
                    $temp['product_id'] = $product_list['product_id'];
                    $temp['product_price'] = $product_list['product_price'];
                    $temp['supplier_id'] = $order['supplier_id'];
                    $temp['client_id'] = $order['client_id'];
                    $temp['created_at'] = time();
                    $result = DB::name("product_price") -> where(['id'=>$price['id']]) -> insert($temp);
                    if($result===false){
                        DB::rollback();
                        Db::connect('db_con') -> rollback();
                        $this -> returnError([],400,"编辑订单失败！");
                    }
                }
            }else{
                //其他产品
                //修改产品订单信息
                $price = Db::connect('db_con')->name("product_price") -> where(['product_id'=>$product_list['product_id'],"client_id"=>$order['client_id']]) -> find();
                if($price){
                    $temp = [];
                    $temp['product_price'] = $product_list['product_price'];
                    $temp['updated_at'] = time();
                    $result = Db::connect('db_con')->name("product_price") -> where(['id'=>$price['id']]) -> update($temp);
                    if($result===false){
                        DB::rollback();
                        Db::connect('db_con') -> rollback();
                        $this -> returnError([],400,"编辑订单失败！");
                    }
                }else{
                    $temp = [];
                    $temp['product_id'] = $product_list['product_id'];
                    $temp['product_price'] = $product_list['product_price'];
                    $temp['supplier_id'] = $order['supplier_id'];
                    $temp['client_id'] = $order['client_id'];
                    $temp['created_at'] = time();
                    $result = Db::connect('db_con')->name("product_price") -> where(['id'=>$price['id']]) -> insert($temp);
                    if($result===false){
                        DB::rollback();
                        Db::connect('db_con') -> rollback();
                        $this -> returnError([],400,"编辑订单失败！");
                    }
                }
            }
        }
        DB::commit();
        Db::connect('db_con') -> commit();
        $this -> returnSuccess([],200,"编辑订单成功！");
    }
    //获取订单详情
    public function order_detail(){
        $this->checkToken();
        $order_id = request()->param('order_id');
        if(!$order_id){
            $this -> returnError([],400,"参数不正确！");
        }
        //查询订单信息
        $order = DB::name("order") -> where(['id'=>$order_id]) -> find();
        if(!$order){
            $this -> returnError([],400,"未发现此订单！");
        }
        $order_amount = 0;
        //查询当前买家的卖家
        if($order['order_type']==0){
            //正常订单
            $order['product_list'] = Db::name('order_detail')->where(["order_id"=>$order_id])->select();
            foreach($order['product_list'] as $k => $v){
                $order_amount += $v['product_price']*$v['product_count'];
            }
        }else{
            //图片订单
            $detail = Db::name('order_detail')->where(["order_id"=>$order_id])->find();
            $order['product_list'] = json_decode($detail['uploaded_img'],true);
        }

        //获取买家的餐厅
        $order_user = Db::name("user") -> where(array("id"=>$order['client_id'])) -> find();
        $order['restaurant_name'] = $order_user['restaurant_name'];
        $order['province'] = $order_user['province'];
        $order['city'] = $order_user['city'];
        $order['district'] = $order_user['district'];
        $order['address'] = $order_user['address'];
        if($order_user['type']==5){
            $order['nickname'] = $order_user['restaurant_name'];
        }else{
            $order['nickname'] = $order_user['nickname'];
        }

        $order['mobile'] = $order_user['mobile'];
        $order['order_amount'] = $order_amount;
        $this -> returnSuccess($order,200,"获取订单详情成功");
    }
    //删除订单产品
    public function del_order(){
        $this->checkToken();
        $unionid = request()->param('unionId');
        $order_id = request()->param('order_id');
        $product_id = request()->param('product_id');
        $is_unlieve = request()->param('is_unlieve');
        //查询当前创建人是否是买家
        $user = Db::name('user')->where(['union_id'=>$unionid,"status"=>1])->find();
        if($user['user_type']!=2){
            $this -> returnError([],400,"您还不是供应商用户！");
        }
        if(!$order_id || !$product_id){
            $this -> returnError([],400,"参数不正确！");
        }
        //查询订单信息
        $order = DB::name("order") -> where(['id'=>$order_id]) -> find();
        if(!$order){
            $this -> returnError([],400,"未发现此订单！");
        }
        //查询订单信息
        $order_detail = DB::name("order_detail") -> where(['order_id'=>$order_id,"product_id"=>$product_id,"is_unlieve"=>$is_unlieve]) -> find();
        if(!$order_detail){
            DB::rollback();
            Db::connect('db_con') -> rollback();
            $this -> returnError([],400,"要删除的产品数据在此订单中不存在！");
        }
        //修改订单数据
        $result = DB::name("order_detail") -> where(['id'=>$order_detail['id']]) -> delete();
        if($result===false){
            DB::rollback();
            Db::connect('db_con') -> rollback();
            $this -> returnError([],400,"删除失败！");
        }
        $this -> returnSuccess([],200,"删除成功！");
    }
    //确认订单
    public function agree_order(){
        $this->checkToken();
        $unionid = request()->param('unionId');
        $order_id = request()->param('order_id');
        $remark = request()->param('remark');
        //查询当前创建人是否是买家
        $user = Db::name('user')->where(['union_id'=>$unionid,"status"=>1])->find();
        if($user['user_type']!=2){
            $this -> returnError([],400,"您还不是供应商用户！");
        }
        if(!$order_id){
            $this -> returnError([],400,"参数不正确！");
        }
        //查询订单信息
        $order = DB::name("order") -> where(['id'=>$order_id]) -> find();
        if(!$order){
            $this -> returnError([],400,"未发现此订单！");
        }
        //修改订单状态
        $temp = [];
        $temp['order_status'] = 2;
        $temp['updated_at'] = time();
        $temp['remark'] = $remark;
        $result = Db::name("order") -> where(array("id"=>$order_id)) -> update($temp);
        if($result===false){
            $this -> returnError([],400,"确认订单失败！");
        }
        DB::commit();
        Db::connect('db_con') -> commit();
        $this -> returnSuccess([],200,"确认订单成功！");
    }
    //拒绝订单
    public function cancel_order(){
        $this->checkToken();
        $unionid = request()->param('unionId');
        $order_id = request()->param('order_id');
        $remark = request()->param('remark');
        //查询当前创建人是否是买家
        $user = Db::name('user')->where(['union_id'=>$unionid,"status"=>1])->find();
        if($user['user_type']!=2){
            $this -> returnError([],400,"您还不是供应商用户！");
        }
        if(!$order_id){
            $this -> returnError([],400,"参数不正确！");
        }
        //查询订单信息
        $order = DB::name("order") -> where(['id'=>$order_id]) -> find();
        if(!$order){
            $this -> returnError([],400,"未发现此订单！");
        }
        //修改订单状态
        $temp = [];
        $temp['order_status'] = 3;
        $temp['updated_at'] = time();
        $temp['remark'] = $remark;
        $result = Db::name("order") -> where(array("id"=>$order_id)) -> update($temp);
        if($result===false){
            $this -> returnError([],400,"拒绝订单失败！");
        }
        $this -> returnSuccess([],200,"拒绝订单成功！");
    }
}